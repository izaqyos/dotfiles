import atexit
import os
import re
#import readline
import gnureadline as readline #fix osx issue no permission to read history file. see https://stackoverflow.com/questions/29572484/os-x-can-anyone-explain-why-i-was-getting-an-os-error-in-my-pythonrc-py-file
import rlcompleter
import socket
import _socket
import sys
import time
import timeit
from collections import *
from itertools import *

from pprint import pprint
from tempfile import mkstemp
from code import InteractiveConsole

# Imports we want
import datetime
import pdb

history = os.path.join(os.environ['HOME'], '.python_history')
print ("history file: ", history)

try:
    readline.read_history_file(history)
except IOError as ioe:
    print("Failed to read python_history file, ",ioe)
    pass
readline.parse_and_bind('tab: complete')
readline.set_history_length(5000)
atexit.register(readline.write_history_file, history)

def t(*args):
    return timeit.Timer(*args).timeit()

# Color Support
class TermColors(dict):
    """Gives easy access to ANSI color codes. Attempts to fall back to no color
for certain TERM values. (Mostly stolen from IPython.)"""

    COLOR_TEMPLATES = (
        ("Black" , "0;30"),
        ("Red" , "0;31"),
        ("Green" , "0;32"),
        ("Brown" , "0;33"),
        ("Blue" , "0;34"),
        ("Purple" , "0;35"),
        ("Cyan" , "0;36"),
        ("LightGray" , "0;37"),
        ("DarkGray" , "1;30"), ("LightRed" , "1;31"),
        ("LightGreen" , "1;32"),
        ("Yellow" , "1;33"),
        ("LightBlue" , "1;34"),
        ("LightPurple" , "1;35"),
        ("LightCyan" , "1;36"),
        ("White" , "1;37"),
        ("Normal" , "0"),
    )

    NoColor = ''
    _base = '\001\033[%sm\002'

    def __init__(self):
        if os.environ.get('TERM') in ('xterm', 'xterm-color', 'xterm-256color', 'linux',
                                    'screen', 'screen-256color', 'screen-bce'):
            self.update(dict([(k, self._base % v) for k,v in self.COLOR_TEMPLATES]))
        else:
            self.update(dict([(k, self.NoColor) for k,v in self.COLOR_TEMPLATES]))
_c = TermColors()

# Enable Color Prompts
sys.ps1 = '%s>>> %s' % (_c['Green'], _c['Normal'])
sys.ps2 = '%s... %s' % (_c['Red'], _c['Normal'])

# Enable Pretty Printing for stdout
def my_displayhook(value):
    if value is not None:
        try:
            import __builtin__
            __builtin__._ = value
        except ImportError:
            __builtins__._ = value

        pprint(value)

sys.displayhook = my_displayhook

print ("Welcome {}, time is {},  Have a good session :-) ".format(os.environ['USER'], time.strftime('%X %x %Z') ))

# Welcome message
#################

WELCOME = """\
%(Cyan)s
Set color, history, and pretty printing.
(If ~/.inputrc doesn't suck, you've also
got completion and vi-mode keybindings.)
%(Brown)s
Type \e to get an external editor.
%(Normal)s""" % _c

atexit.register(lambda: sys.stdout.write("""%(DarkGray)s
Sheesh, I thought he'd never leave. Who invited that guy?
%(Normal)s""" % _c))

# Start an external editor with \e
##################################
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/438813/

##EDITOR = os.environ.get('EDITOR', 'vi')
##EDIT_CMD = '\e'
##
##class EditableBufferInteractiveConsole(InteractiveConsole):
##    def __init__(self, *args, **kwargs):
##        self.last_buffer = [] # This holds the last executed statement
##        InteractiveConsole.__init__(self, *args, **kwargs)
##
##    def runsource(self, source, *args):
##        self.last_buffer = [ source.encode('utf-8') ]
##        return InteractiveConsole.runsource(self, source, *args)
##
##    def raw_input(self, *args):
##        line = InteractiveConsole.raw_input(self, *args)
##        if line == EDIT_CMD:
##            fd, tmpfl = mkstemp('.py')
##            os.write(fd, b'\n'.join(self.last_buffer))
##            os.close(fd)
##            os.system('%s %s' % (EDITOR, tmpfl))
##            line = open(tmpfl).read()
##            os.unlink(tmpfl)
##            tmpfl = ''
##            lines = line.split( '\n' )
##            for i in range(len(lines) - 1): self.push( lines[i] )
##            line = lines[-1]
##        return line
##
##c = EditableBufferInteractiveConsole(locals=locals())
##c.interact(banner=WELCOME)
##
### Exit the Python shell on exiting the InteractiveConsole
##sys.exit()


